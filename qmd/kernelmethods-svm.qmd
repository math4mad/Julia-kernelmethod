---
title: "Kernel Methods with SVM"
author: "math4mad"
date: "5/16/2023"
format:
  html:
    code-fold: true
jupyter: julia-1.9
---

## package

```{julia}

using CSV
using DataFrames
using KernelFunctions
using MLJ
using Plots
using PrettyPrinting
using Random
import MLJ: fit!, predict
```

## define kernelmethods and utils function

```{julia}
#define kernelmethods
k1=PolynomialKernel(; degree=2, c=1)
k2 = SqExponentialKernel() âˆ˜ ScaleTransform(1.5)
k3 = SqExponentialKernel() 
k4=PolynomialKernel(; degree=3, c=1)

urls(str)="/Users/lunarcheung/Public/DataSets/clustering-datasets/$str.csv"
f(str)=urls(str)|>CSV.File|>DataFrame
```

## data

```{julia}
df=f("basic5")
xt1=df[1:2:4000,:x]
xt2=df[1:2:4000,:y]
Xt1=hcat(xt1,xt2)
yt1=df[1:2:4000,:color]
X = MLJ.table(Xt1)
y = categorical(yt1);
```

## build model

```{julia}
 SVC = @load SVC pkg=LIBSVM

 svc_mdl = SVC(kernel=k1)

 svc = machine(svc_mdl, X, y)

fit!(svc);
```

## predict

```{julia}
tr = range(35,550; length=150)
x_test = mapreduce(collect, hcat, Iterators.product(tr, tr));
x_test=MLJ.table(x_test')

ypred=predict(svc, x_test)
```

## plot

```{julia}
#| label: scatter-contour
#| fig-cap: desc boundary"
contourf(
    tr,
    tr,
    ypred,
    levels=2,
    color=cgrad(:redsblues),
    alpha=0.7
)

p1=scatter!(df[:,:x],df[:,:y],group=df[:,:color],label=false,ms=3,alpha=0.3)
```


